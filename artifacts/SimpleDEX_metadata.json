{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenB",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"name": "LiquidityAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"name": "LiquidityRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"name": "TokenSwapped",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "getPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountAIn",
						"type": "uint256"
					}
				],
				"name": "swapAforB",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountBIn",
						"type": "uint256"
					}
				],
				"name": "swapBforA",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenA",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenB",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "[Gabriel Iakantas]",
			"details": "Implementa la fórmula de producto constante para intercambios",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"events": {
				"LiquidityAdded(uint256,uint256)": {
					"params": {
						"amountA": "Cantidad de token A agregada",
						"amountB": "Cantidad de token B agregada"
					}
				},
				"LiquidityRemoved(uint256,uint256)": {
					"params": {
						"amountA": "Cantidad de token A removida",
						"amountB": "Cantidad de token B removida"
					}
				},
				"TokenSwapped(address,uint256,uint256)": {
					"params": {
						"amountIn": "Cantidad del token de entrada",
						"amountOut": "Cantidad del token de salida",
						"user": "Dirección del usuario que realizó el intercambio"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"addLiquidity(uint256,uint256)": {
					"details": "Solo puede ser llamado por el propietario",
					"params": {
						"amountA": "Cantidad de token A a agregar",
						"amountB": "Cantidad de token B a agregar"
					}
				},
				"constructor": {
					"params": {
						"_tokenA": "Dirección del token A",
						"_tokenB": "Dirección del token B"
					}
				},
				"getPrice(address)": {
					"params": {
						"_token": "Dirección del token a evaluar"
					},
					"returns": {
						"_0": "Precio relativo en términos del otro token"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"removeLiquidity(uint256,uint256)": {
					"details": "Solo puede ser llamado por el propietario",
					"params": {
						"amountA": "Cantidad de token A a remover",
						"amountB": "Cantidad de token B a remover"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"swapAforB(uint256)": {
					"params": {
						"amountAIn": "Cantidad de token A para intercambiar"
					}
				},
				"swapBforA(uint256)": {
					"params": {
						"amountBIn": "Cantidad de token B para intercambiar"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "Simple Decentralized Exchange (DEX)",
			"version": 1
		},
		"userdoc": {
			"events": {
				"LiquidityAdded(uint256,uint256)": {
					"notice": "Evento emitido al agregar liquidez"
				},
				"LiquidityRemoved(uint256,uint256)": {
					"notice": "Evento emitido al remover liquidez"
				},
				"TokenSwapped(address,uint256,uint256)": {
					"notice": "Evento emitido al realizar un intercambio"
				}
			},
			"kind": "user",
			"methods": {
				"addLiquidity(uint256,uint256)": {
					"notice": "Agrega liquidez al pool"
				},
				"constructor": {
					"notice": "Constructor para inicializar el contrato con los tokens"
				},
				"getPrice(address)": {
					"notice": "Calcula el precio relativo de un token"
				},
				"removeLiquidity(uint256,uint256)": {
					"notice": "Remueve liquidez del pool"
				},
				"swapAforB(uint256)": {
					"notice": "Intercambia token A por token B"
				},
				"swapBforA(uint256)": {
					"notice": "Intercambia token B por token A"
				},
				"tokenA()": {
					"notice": "Token A en el pool de liquidez"
				},
				"tokenB()": {
					"notice": "Token B en el pool de liquidez"
				}
			},
			"notice": "Contrato para intercambiar tokens y gestionar liquidez",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"SimpleDEX_flattened.sol": "SimpleDEX"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"SimpleDEX_flattened.sol": {
			"keccak256": "0x69c4e9463044bc5e713475d1956a6679bd7070d4ef46db4c3c52458177ff62a6",
			"urls": [
				"bzz-raw://1d2152928ce6ea33a698c791d34869538e0a2a007f3fc560799ecb89cd4ce22d",
				"dweb:/ipfs/QmcKrxNRx4LrwdZ7nyM6RxXoVTG7mXdKkAogq5QM8jNA9q"
			]
		}
	},
	"version": 1
}